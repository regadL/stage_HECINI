k234 <- cutree(dend, k = c(10:12))
#names(clusters_Desc) = gsub(".desc", replacement = "", names(clusters_Desc) )
#dt_test = merge(k234,clusters_Desc, by = 0 , all = F)
# color labels by car company:
labels_colors(dend) <- col_poche_number[order.dendrogram(dend)]
# color branches based on cutting the tree into 22 clusters:
dend <- color_branches(dend, k = 12)
### plots
par(mar = c(18,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
par(mar = c(10,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
par(mar = c(15,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
par(mar = c(19,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,12))))
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,11,12))))
library(dendextend)
dend = as.dendrogram(hc)
plot(dend)
poche_number <- rep("Other", length(rownames(Mat)))
is_x <- grepl("pocket0", rownames(Mat))
poche_number[is_x] <- "0"
is_x <- grepl("pocket1", rownames(Mat))
poche_number[is_x] <- "1"
is_x <- grepl("pocket11", rownames(Mat))
poche_number[is_x] <- "11"
is_x <- grepl("pocket10", rownames(Mat))
poche_number[is_x] <- "10"
is_x <- grepl("pocket2", rownames(Mat))
poche_number[is_x] <- "2"
is_x <- grepl("pocket3", rownames(Mat))
poche_number[is_x] <- "3"
is_x <- grepl("pocket4", rownames(Mat))
poche_number[is_x] <- "4"
is_x <- grepl("pocket5", rownames(Mat))
poche_number[is_x] <- "5"
is_x <- grepl("pocket6", rownames(Mat))
poche_number[is_x] <- "6"
is_x <- grepl("pocket7", rownames(Mat))
poche_number[is_x] <- "7"
is_x <- grepl("pocket8", rownames(Mat))
poche_number[is_x] <- "8"
is_x <- grepl("pocket9", rownames(Mat))
poche_number[is_x] <- "9"
poche_number <- factor(poche_number)
length(poche_number)
n_poche_numbers <- length(unique(poche_number))
cols_11 <- colorspace::rainbow_hcl(n_poche_numbers, c = 70, l  = 50)
col_poche_number <- cols_11[poche_number]
# extra: showing the various clusters cuts
k234 <- cutree(dend, k = c(10:12))
#names(clusters_Desc) = gsub(".desc", replacement = "", names(clusters_Desc) )
#dt_test = merge(k234,clusters_Desc, by = 0 , all = F)
# color labels by car company:
labels_colors(dend) <- col_poche_number[order.dendrogram(dend)]
# color branches based on cutting the tree into 22 clusters:
dend <- color_branches(dend, k = 12)
### plots
par(mar = c(19,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,11,12))))
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,11,12))))
k234 <- cutree(dend, h = c(1.9,2,2.1))
labels_colors(dend) <- col_poche_number[order.dendrogram(dend)]
dend <- color_branches(dend, k = 14)
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("k = ", c(10,11,12))))
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("h = ", c(1.9,2,2.1))))
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("h = ", c(1.9,2,2.1))))
for (c in seq(1.1 , 3 , by = 0.1)){ #des valeurs de H differentes
groupes=cutree(hc,h=c) # je coupe
nbr_groupes = max(groupes[]) # la nombre de clusters générés
vect_score = NULL
for (groupe in 1:nbr_groupes){ # pour chaque cluster
nbr_ind = length(which(sort(groupes)[] == groupe)) # je calcule le nombre d'inv par cluster
groupe_cluster = which(sort(groupes)[] == groupe) #le nom de mes individus
s = 0
comp = 0
moy = 0
for (ind in 1:(nbr_ind-1)){
deb = ind
for(ind2 in (deb+1):nbr_ind){
s = s + score(names(groupe_cluster[ind]),names(groupe_cluster[ind2]),df)
comp = comp+1
}
}
moy = (s/comp)
vect_score = c(vect_score,moy)
}
plot(c(1:nbr_groupes), vect_score , xlab = as.character(c))
abline(h = mean(vect_score), col = 2)
print(c)
print(sum ((vect_score - mean(vect_score))^2)/length(vect_score))
}
cbind(k234[,]
q
k234[,]
cbind(k234[,], col_poche_number[])
taille = max(groupes=cutree(hc,h=1.9))
groupes=cutree(hc,h=1.9)
sort(groupes[])
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
var_data = list()
for(v in 1:taille){
nac = names(which(sort(groupes[]) == v))
print(as.character(v))
writeLines(nac, sep = " ")
var_data[[v]] = apply(data_new[nac,], 2, sd)
}
taille
for(v in 1:taille){
nac = names(which(sort(groupes[]) == v))
print(as.character(v))
writeLines(nac, sep = " ")
}
taille = max(groupes=cutree(hc,h=1.3))
groupes=cutree(hc,h=1.3)
sort(groupes[])
#numbre d'individus par cluster
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
for(v in 1:taille){
nac = names(which(sort(groupes[]) == v))
print(as.character(v))
writeLines(nac, sep = " ")
}
score_all = NULL
for (c in seq(1.1 , 2.5 , by = 0.1)) { #des valeurs de H differentes
groupes=cutree(hc,h=c) # je coupe
nbr_groupes = max(groupes[]) # le nombre de clusters générés
vect_score = NULL
#créer la matrice
matrice = matrix(NA,nbr_groupes,nbr_groupes)
rownames(matrice) = c(1:nbr_groupes)
colnames(matrice) = c(1:nbr_groupes)
for (groupe in 1:nbr_groupes){ # pour chaque cluster
nbr_ind = length(which(sort(groupes)[] == groupe)) #nbr de poches dans le clus 1
nom_cluster1 = which(sort(groupes)[] == groupe) #le nom des poches1
for(groupe2 in 1:nbr_groupes){
s = 0 #la somme
comp = 0 #compteur
moy = 0 #moyenne
nbr_ind2 = length(which(sort(groupes)[] == groupe2)) #nombre de poches dans clus 2
nom_cluster2 = which(sort(groupes)[] == groupe2) #le nom des poches2
for (ind in 1:nbr_ind){ # pour chaque poche1
for(ind2 in 1:nbr_ind2){ # pour chaque poche2
s = s + score(names(nom_cluster1[ind]),names(nom_cluster2[ind2]),df)
comp = comp+1
}
}
#remplir la matrice
moy = (s/comp)
matrice[groupe,groupe2] = round(moy*100,2)
}
}
form = sprintf('%s_clusters.csv', c)
write.csv(matrice, file = form)
}
for (c in seq(1.1 , 3 , by = 0.1)){ #des valeurs de H differentes
groupes=cutree(hc,h=c) # je coupe
nbr_groupes = max(groupes[]) # la nombre de clusters générés
vect_score = NULL
for (groupe in 1:nbr_groupes){ # pour chaque cluster
nbr_ind = length(which(sort(groupes)[] == groupe)) # je calcule le nombre d'inv par cluster
groupe_cluster = which(sort(groupes)[] == groupe) #le nom de mes individus
s = 0
comp = 0
moy = 0
for (ind in 1:(nbr_ind-1)){
deb = ind
for(ind2 in (deb+1):nbr_ind){
s = s + score(names(groupe_cluster[ind]),names(groupe_cluster[ind2]),df)
comp = comp+1
}
}
moy = (s/comp)
vect_score = c(vect_score,moy)
}
plot(c(1:nbr_groupes), vect_score , xlab = as.character(c))
abline(h = mean(vect_score), col = 2)
print(c)
print(sum ((vect_score - mean(vect_score))^2)/length(vect_score))
}
m1 = read.csv("1.3_clusters.csv")
View(m1)
View(m1)
nrow(m1)
s = 0
for(q in 2:nrow(m1)){
for (s in 1:(q-1))
s = s + m1[q,s]
}
print(s)
print(s)
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
for (s in 1:(q-1))
s = s + m1[q,s]
print(s)
}
s = 0
for(q in 2:nrow(m1)){
print(q)
for (d in 1:(q-1))
s = s + m1[q,s]
print(s)
}
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
print(q)
for (d in 1:(q-1))
s = s + m1[q,s]
print(s)
}
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
print(q)
for (d in 1:q)
s = s + m1[q,s]
print(s)
}
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
for (d in 1:q)
m1[q,s]
}
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
for (d in 1:q)
print(m1[q,s])
}
m1 = read.csv("1.3_clusters.csv")
s = 0
for(q in 2:nrow(m1)){
for (d in 1:q)
print(m1[q,d])
}
m1 = m1[,-1]
for(q in 2:nrow(m1)){
for (d in 1:q)
print(m1[q,d])
}
m1 = read.csv("1.3_clusters.csv")
m1 = m1[,-1]
s = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
print(m1[q,d])
}
m1 = read.csv("1.3_clusters.csv")
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
somme
for (z in seq(1.1 , 2.5 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
#calcul de la somme d'une demi matrice :
vec_somme = NULL
for (z in seq(1.1 , 2.5 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
vec_somme
m1 = read.csv(doc)
View(m1)
View(m1)
n_clstr = nrow(m1)
n_clstr = NULL
#calcul de la somme d'une demi matrice :
vec_somme = NULL
n_clstr = NULL
for (z in seq(1.1 , 2.5 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
n_clstr = c(n_clstr,nrow(m1))
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
vec_somme
n_clstr
plot(vec_somme,n_clstr)
plot(n_clstr, vec_somme)
n_clstr
plot(n_clstr, vec_somme, pch = 19)
plot(n_clstr, vec_somme, pch = 19, col = 3)
plot(n_clstr, vec_somme, pch = 19, col = 6)
vec_somme = NULL
n_clstr = NULL
for (z in seq(1.1 , 2.5 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
n_clstr = c(n_clstr,z)
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
plot(n_clstr, vec_somme, pch = 19, col = 6)
#calcul de la somme d'une demi matrice :
vec_somme = NULL
H_couper = NULL
for (z in seq(1.1 , 2.5 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
H_couper = c(H_couper,z)
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
plot(H_couper, vec_somme, pch = 19, col = 6)
#calcul des scores entre les groupes :
score_all = NULL
for (c in seq(1.1 , 3 , by = 0.1)) { #des valeurs de H differentes
groupes=cutree(hc,h=c) # je coupe
nbr_groupes = max(groupes[]) # le nombre de clusters générés
vect_score = NULL
#créer la matrice
matrice = matrix(NA,nbr_groupes,nbr_groupes)
rownames(matrice) = c(1:nbr_groupes)
colnames(matrice) = c(1:nbr_groupes)
for (groupe in 1:nbr_groupes){ # pour chaque cluster
nbr_ind = length(which(sort(groupes)[] == groupe)) #nbr de poches dans le clus 1
nom_cluster1 = which(sort(groupes)[] == groupe) #le nom des poches1
for(groupe2 in 1:nbr_groupes){
s = 0 #la somme
comp = 0 #compteur
moy = 0 #moyenne
nbr_ind2 = length(which(sort(groupes)[] == groupe2)) #nombre de poches dans clus 2
nom_cluster2 = which(sort(groupes)[] == groupe2) #le nom des poches2
for (ind in 1:nbr_ind){ # pour chaque poche1
for(ind2 in 1:nbr_ind2){ # pour chaque poche2
s = s + score(names(nom_cluster1[ind]),names(nom_cluster2[ind2]),df)
comp = comp+1
}
}
#remplir la matrice
moy = (s/comp)
matrice[groupe,groupe2] = round(moy*100,2)
}
}
form = sprintf('%s_clusters.csv', c)
write.csv(matrice, file = form)
}
#calcul de la somme d'une demi matrice :
vec_somme = NULL
H_couper = NULL
for (z in seq(1.1 , 3 , by = 0.1)){
doc = sprintf("%s_clusters.csv",z)
m1 = read.csv(doc)
H_couper = c(H_couper,z)
m1 = m1[,-1]
somme = 0
for(q in 2:nrow(m1)){
for (d in 1:(q-1))
somme = somme + m1[q,d]
}
vec_somme = c(vec_somme, somme)
}
plot(H_couper, vec_somme, pch = 19, col = 6)
plot(H_couper, vec_somme, pch = 19, col = 6, type = "b")
plot(H_couper, vec_somme, pch = 19, col = 6, type = "l")
plot(H_couper, vec_somme, pch = 19, col = 6, type = "b")
taille = max(groupes=cutree(hc,h=2))
groupes=cutree(hc,h=2)
sort(groupes[])
#numbre d'individus par cluster
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
nac = names(which(sort(groupes[]) == 4))
writeLines(nac, sep = " ")
taille = max(groupes=cutree(hc,h=1.8))
groupes=cutree(hc,h=1.8)
sort(groupes[])
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
nac = names(which(sort(groupes[]) == 9))
writeLines(nac, sep = " ")
taille = max(groupes=cutree(hc,h=1.3))
groupes=cutree(hc,h=1.3)
sort(groupes[])
#numbre d'individus par cluster
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
nac = names(which(sort(groupes[]) == 16))
writeLines(nac, sep = " ")
taille = max(groupes=cutree(hc,h=1.2))
groupes=cutree(hc,h=1.2)
sort(groupes[])
#numbre d'individus par cluster
for (x in 1:max(groupes[])){
print(as.character(x))
print(length(which(sort(groupes[]) == x)))
}
nac = names(which(sort(groupes[]) == 17))
writeLines(nac, sep = " ")
plot(H_couper, vec_somme, pch = 19, col = 6, type = "b", xlab = "valeurs de H", ylab = "la somme")
map = pheatmap(Mat,  border_color      = NA,
#color = inferno(50),
show_colnames     = FALSE,
show_rownames     = FALSE,
annotation_colors = mat_colors,
fontsize          = 8,
main              = "HeatMap" )
library(dendextend)
dend = as.dendrogram(hc)
plot(dend)
poche_number <- rep("Other", length(rownames(Mat)))
is_x <- grepl("pocket0", rownames(Mat))
poche_number[is_x] <- "0"
is_x <- grepl("pocket1", rownames(Mat))
poche_number[is_x] <- "1"
is_x <- grepl("pocket11", rownames(Mat))
poche_number[is_x] <- "11"
is_x <- grepl("pocket10", rownames(Mat))
poche_number[is_x] <- "10"
is_x <- grepl("pocket2", rownames(Mat))
poche_number[is_x] <- "2"
is_x <- grepl("pocket3", rownames(Mat))
poche_number[is_x] <- "3"
is_x <- grepl("pocket4", rownames(Mat))
poche_number[is_x] <- "4"
is_x <- grepl("pocket5", rownames(Mat))
poche_number[is_x] <- "5"
is_x <- grepl("pocket6", rownames(Mat))
poche_number[is_x] <- "6"
is_x <- grepl("pocket7", rownames(Mat))
poche_number[is_x] <- "7"
is_x <- grepl("pocket8", rownames(Mat))
poche_number[is_x] <- "8"
is_x <- grepl("pocket9", rownames(Mat))
poche_number[is_x] <- "9"
poche_number <- factor(poche_number)
length(poche_number)
n_poche_numbers <- length(unique(poche_number))
cols_11 <- colorspace::rainbow_hcl(n_poche_numbers, c = 70, l  = 50)
col_poche_number <- cols_11[poche_number]
# extra: showing the various clusters cuts
k234 <- cutree(dend, h = c(1.9,2,2.1))
#names(clusters_Desc) = gsub(".desc", replacement = "", names(clusters_Desc) )
#dt_test = merge(k234,clusters_Desc, by = 0 , all = F)
# color labels by car company:
labels_colors(dend) <- col_poche_number[order.dendrogram(dend)]
# color branches based on cutting the tree into 22 clusters:
dend <- color_branches(dend, k = 14)
### plots
par(mar = c(17,4,1,1))
plot(dend)
colored_bars(cbind(k234[,], col_poche_number[]), dend, rowLabels = c(paste0("h = ", c(1.9,2,2.1))))
#colored_bars( as.matrix(cbind(dt_test,col_poche_number)) ,  dend)
